
1. Node.js
    - JS 런타임
    - Node.js 나오기 전까지는 JS 실행은 브라우저 기반이었음 -> 실행의 한계 존재
    - 현재는 어떤 곳에서도 실행 가능한 환경이 됨 -> 대중화의 밑거름
    - IDE 에서 JS 실행 : npm run start

    1.1 개발방법
        - 모듈과 모듈 시스템의 개념으로 개발 진행
            모듈 : 재사용이 가능한 형태의 소스나 파일
                   재사용 가능한 모듈들이 모여 하나의 시스템
        - React 역시 모듈 기반으로 개발 진행
            수업에선 ES(ECMAScript) 모듈 시스템 방식으로 개발 진행 
            -> package.json 에서 "type": "module" 로 설정
    
    1.2 재사용성
        - export 키워드를 사용해 외부에서 사용될 수 있도록 공유
        - 관련있는 기능이나 정보들은 하나의 JS 파일에서 관리하게 됨
            -> SRP 가 적용된 것과 동일
        - 사용될 곳에서는 공유된 것을 import 하여 사용
            import * as circle from "./circle.js"
        - import 종류
            개별 내보내기 : export 를 함수명, 상수 앞에 붙여서 사용
            개별 불러오기 : import { PI, getArea } from "./circle.js"
            전부 불러오기 : import * as circle from "./circle.js"
            기본값으로 보내기 : export 와 함께 default 키워드 사용
                              기본값으로 보내면 불러올 때 중괄호를 사용하지 않아도 됨
                              그리고 자유롭게 이름을 지정해 사용할 수 있음

    1.3 라이브러리 사용 
        - 외부 패키지(라이브러리)를 설치해서 사용
            ex) Loadsh : 배열 및 객체를 다루는데 특화된 기능을 제공하는 라이브러리
        - 설치 명령어
            npm i loadsh ( npm : node package manager , i : install )
        - 외부 라이브러리 검색 사이트
            https://www.npmjs.com/
    
2. 리액트
    - node.js 의 라이브러리 
    - 특징
        1. 컴포넌트 기반의 유연성 ( 컴포넌트 )
        2. 쉽고 간단한 업데이트 ( 선언형 프로그래밍 )
        3. 빠른 업데이트 ( Virtual DOM )
    
2.1 컴포넌트 기반의 유연성 ( 기본 웹 페이지 vs 컴포넌트 )
    - Header 가 모든 웹 페이지에 포함되는 것을 가정
      웹 페이지가 100개, 한 군데에서 Header 를 수정, 99 군데 수정해야 함..

      Header 와 같은 재사용이 가능한 부분을 컴포넌트로 작성
      하나의 Header 컴포넌트로 모든 페이지에서 사용되도록 함 (React)
    
      수정이 발생하더라도 하나의 컴포넌트만 수정하면 모든 페이지에 반영됨

      컴포넌트는 JS 함수형태로 구현해서 호출해 사용
      호출해서 반환되는 값은 Header 태그가 반환됨 -> react 컴포넌트

      컴포넌트 : HTML 태그를 반환하는 함수

2.2 쉽고 간단한 업데이트 ( 선언형 프로그래밍 )
    - javascript
      개발자 주도 프로그래밍. 
      명령형 프로그래밍( 개발자가 처음에서 끝까지 모두 코드로 구현 )
      모든 과정 하나 하나를 설명. 코드가 길어지고 복잡해짐.
    
    - react
      선언형 프로그래밍.( 컴포넌트는 재사용, 함수 호출하듯이 사용 )
      Header 자리에 후보군 3개가 있다고 가장.
      Header1 : 1, Header2 : 2, Header3 : 3

      state 변수(컴포넌트)를 1, 2, 3 중에서 하나로 설정(선언)
      => 해당되는 Header 가 화면에 적용되어 표시됨.
      => 화면제어가 간편해짐.

      컴포넌트 기반의 화면 제어를 react가 지원함.

    - JS 객체
        1. 객체 종류
            - 내장 객체
              JS 에서 미리 객체 정의되어 있는 API
              개발자가 쉽게 사용할 수 있도록 미리 만들어둔 객체
              -> windows 객체

            - DOM(Document Object Model) 객체
              document 객체

            - 웹 브라우저 객체
              location, history 등의 객체

            - 사용자 정의 객체
        
        2. DOM(Document Object Model) 객체
            - JS 와 같은 프로그래밍 언어로 웹 문서에 접근하고
              제어할 수 있도록 웹 문서를 체계적(논리적)으로 정리하는 방법
            - DOM 에서는 웹 문서를 하나의 객체로 정의하고, 
              웹 문서를 이루는 모든 요소(Tag, node)를 각각의 객체로 정의하여 관리
            - DOM tree ( DOM node tree )
              document - html - head and body ...
            - document node
              - DOM tree 의 최상위 root node 임
              - HTML 문서당 document 객체는 유일함
              - DOM 트리의 node 들에 접근하기 위한 진입점
              - 전역객체 window 의 document 프로퍼티에 바인딩되어 있음
        
        3. DOM 에서 node(웹 요소, Tag) 에 접근 - API 를 사용
            - querySelector() : 대상이 하나의 요소
            - querySelectorAll() : 대상이 여러 요소
            - getElement*() : 대상을 선택자를 사용해 접근
              getElementById() : id 로 요소 접근
              getElementByClassName() : 여러 요소가 대상
              getElementByTagName() : 여러 요소가 대상
        
        4. Node(요소, tag) List
            - querySelectorAll() API 함수를 사용해 반환되는 정보
            - 요소 추가 및 삭제는 Node list 를 기준으로 반영됨

        5. 노드 추가 및 수정을 위해 제공되는 함수(API)
            - createElement()
            - appendChild()
            - createAttribute()
            - setAttribute()
            - remove()
            - removeChild()
        
        6. document 객체(DOM)에 img tag(node, 요소)를 추가하는 사례
            - img tag 를 요소 노드로 신규 생성
              let newImg = document.createElement("img");
            - img tag 의 src 속성을 설정하기 위해 속성 노드를 신규로 생성
              let srcNode = document.createAttribute("src");
              srcNode.value = "images/wall.jpg";
            - img tag 의 node 와 src 속성 node 를 연결
              newImg.setAttribute(srcNode);

                ====== img tag node 구성 ======

            - html 문서에서 img tag 와 연결된 부모 노드에 연결
              -> 완성된 html 문서가 됨
              document.body.appendChild(newImg);

                ====== html document 구성 완료 ======

2.3 빠른 업데이트 ( Virtual DOM )
    - 브라우저 화면 업데이트 단계
      (HTML, CSS) -> 렌드 트리 -> 레이 아웃 -> 페인팅

      렌트 트리 : DOM 과 DOM 요소에 스타일 정보를 적용
      레이 아웃 : 렌드 트리(DOM) 정보를 바탕으로 화면(모니터)상의 위치정보(픽셀) 계산
      페인팅 : document 의 요소를 화면에 실제로 출력

    - Virtual DOM 을 활용해서 document 의 수정, 추가, 삭제와 관련된 모든 변경 사항을 
      브라우저의 DOM 에 적용하지 않고, react 의 Virtual DOM (브라우저 DOM 의 복사본) 에 적용한다.
      적용이 완료되면 일괄로 브라우저 DOM 에 적용하는 방식으로 렌더링 속도를 개선했음

3. create react app vs vite
    - vite 가 create react app 보다 최신
    - 둘 다 react 프로젝트를 빠르게 시작하고 간단하게 설정을 제공함
    - 성능과 다양한 커스터마이제이션은 vite 가 더 우수함
      vite 는 더 빠르고 유연한 개발이 되도록 지원하며, react 와 다른 프레임워크를 위한 범용 도구로 사용 가능
      
      따라서, 실습 역시 vite 로 진행

4. react 프로젝트 생성 및 react app 실행
    
    4.1 프로젝트 생성 with vite(비트)
        폴더 경로의 shell 에서 npm create vite@latest

    4.2 생성된 프로젝트에서 라이브러리 설치
        의존관계의 라이브러리 일괄 설치

        npm i 
        -> 웹 서버 환경이 함께 설치됨

    4.3 react app 실행
        npm run dev

        react app 실행이 되면 기본적으로 웹 서버 탑재되어 브라우저 사용 가능

    4.4 프로젝트 구성  
        - node_modules
          외부 라이브러리 설치 폴더 -> 굳이 깃허브에 저장할 필요 X
        - src   
          프로젝트 관련 모듈을 관리하는 폴더

          *.jsx : JS 로 구현해야 하는 컴포넌트 파일
          index.html : 메인 화면 (main.jsx 참조)

5. 프로젝트 초기화
  백지상태로 만들어서 하나씩 추가해서 확장할 예정

  5.1 초기화 대상
    - 그림파일 삭제
      react.svg
      vite.svg
    - App.jsx 에서 import 문 삭제
    - 사용하지 않는 함수 삭제
      useState(0) 함수 삭제
      import 부분 삭제
    - 기존 html 삭제 후
      <h1>방가방가</h1> 추가
    - App.css 에서 CSS 스타일 설정 내용 전부 삭제
    - main.jsx 에서 <React.StrictMode> 태그 삭제
    - eslint extension 설치
      -> .eslintrc.cjs 파일 생성됨
      eslint : 코드를 작성하면, 정적으로 코드를 검사하여 
               오류가 발생할 만한 코드가 잇으면 경고를 띄워주는 프로그램

               코드를 직접 실행해보기 전에 미리 오류를 VScode 상에서 확인할 수 있게 됨

               오류 민감도가 높은 편이기 때문에, 초기 React 공부의 편의를 위해 
               불편한 코드는 off 로 변경하S여 편하게 사용할 예정

               "no-unused-vars": 실제로 사용하지 않는 변수를 오류로 알려줌
               "react/prop-types": 리액트를 배우고 나서 좀 더 안전하게 사용할 수 있도록 해주는 옵션
                                   현재는 불편.. off

6. 컴포넌트 작성
  6.1 컴포넌트
    - html tag 를 반환하는 함수
      ex. function APP => App 컴포넌트
  
  6.2 컴포넌트 Header, Main, Footer 추가
    - 클래스로도 만들 수 있음. 그러나 작성해야 하는 코드가 너무 많아서 개발생산성 not good.
      함수 형태로 컴포넌트를 만드는 것이 훨씬 일반적

      == 주의사항 ==
      컴포넌트 작성시 함수명은 반드시 첫 글자가 대문자여야 한다.
      소문자로 시작하면 react 내부에서 컴포넌트로 인식하지 않음!!

  6.3 컴포넌트 사용
    - <Header /> 와 같은 tag 형태로 컴포넌트를 호출해 사용

  6.4 컴포넌트 간의 관계
    - Header 컴포넌트는 다른 컴포넌트인 App 컴포넌트에 포함되어 호출되고 있음
      즉, Header 컴포넌트는 App 컴포넌트의 자식 컴포넌트.

      현재의 컴포넌트들이 화면에 rendering 되기 위해선 App 컴포넌트의 자식 컴포넌트로 존재해야 함 :)

      main.jsx 의 render() 에 사용되는 컴포넌트가 최상위 컴포넌트가 됨


  6.5 컴포넌트 분리
    - App.jsx 에 작성한 컴포넌트들을 별도의 파일로 작성
      모듈화를 위해 컴포넌트별로 각각 파일을 나눠서 작성하는 것이 일반적

      - components 폴더
      - 3가지의 컴포넌트 파일 생성
      - export(공유), import(참조) 추가
      - 3가지 컴포넌트에 대해 import 시, 명시적으로 파일명 작성 X
        vite 로 만든 앱에서는 확장자를 사용하지 않아도 자동으로 파일을 찾아가도록 내부적으로 설정되기 때문.

  6.6 JSX( javascript extension ) : 확장된 JS 의 문법
    - JS 함수로 html 반환
    - 컴포넌트 내에서 변수를 설정해 html 로 렌더링
    - 변수 설정 
      { number }
    
      중괄호 안에는 숫자나 문자열 값으로 평가할 수 있는 식이라면 무엇이든지 모두 사용 가능
      
    - JSX 주의 사항
      a. 중괄호 내부에는 JS 표현식만 사용가능
          한 줄의 코드가 특정한 값으로 평가될 수 있는 식
          -> 조건식, 반복문을 사용하면 오류가 발생함
      b. 숫자, 문자열, 배열 값만 렌더링됨
      c. 객체의 경우, 프로퍼티를 지정해 사용해야 함
      d. 모든 태그는 닫혀 있어야 함
      e. 최상위 태그는 반드시 하나여야 함
         컴포넌트 내에서 태그는 최상위 레벨의 경우는 하나여야 함
         <main> 와 동일한 레벨의 <div> 가 존재하면 안됨!

         <main> 처럼 특정한 태그로 감싸줄 필요가 없는 경우, 비어있는 태그 '<> </>'를 사용!
      f. 값이 null, true, false, undefined 라면 값이 없게 출력됨
         <h2>{true}</h2>
         <h2>{false}</h2>
         <h2>{undefined}</h2>
         <h2>{null}</h2>
         
         -> 화면 상 표시
         <h2></h2>
         <h2></h2>
         <h2></h2>
         <h2></h2>

  6.7 컴포넌트에 값 전달 (Button.jsx 및 Body.jsx, App.jsx 참고)
    - 부모 컴포넌트가 자식 컴포넌트에게 단일 객체 형태로 값을 전달 가능
      -> Props ( properties 의 줄임말 )
      
      Props 는 react 의 핵심 개념 중 하나.

      Props 를 사용하면 컴포넌트를 마치 함수 호출하듯이 전달하는 값에 따라 각각 다른 UI 를 렌더링하도록 제어할 수 있음
      즉, 컴포넌트의 공통 기능이 아닌 세부 기능을 표현할 때 Props 를 사용함 

      리액트의 컴포넌트와 Props 를 샌드위치 제조에 비유한다면,
      샌드위치의 겉을 둘러싼 방이 컴포넌트이고, 샌드위치 속이 Props 가 될 것.
      똑같은 샌드위치지만 Props 로 햄을 전달하면 햄샌드위치가 되고, 야채를 넣으면 야채 샌드위치가 되는 원리와 흡사

      - 매개변수 사용
        - Props 로 값 전달하기
          Props 는 오직 부모 -> 자식 컴포넌트로 전달 가능함 :)
            ( 역 성립 X )
            -> Button 이나 Body 컴포넌트에 Props 를 전달하려면 부모인 App 컴포넌트에서 전달해야 함
          
          부모 컴포넌트에서 데이터 전달
            <Button 이름 = {값} /> 형식

          자식 컴포넌트에서 전달받은 Props 사용
            부모 컴포넌트에서 전달된 객체 Props 는 함수의 매개변수 형태로 저장됨
            {props.이름} 으로 사용


          객체의 프로퍼티를 구분해서 사용

        - 스프레드 연산자 + 객체 구조 분해 할당으로 여러 개의 값 전달 & 사용
          위의 단점... : Props 로 전달된 값이 많으면 값마다 사용하기위해 객체의 점 표시법을 사용해야 한다는 불편이 있음

          해결 : 던질 데이터를 객체화하여 스프레드 연산자로 던지고, 이를 구조 분해 할당해 사용하자 :)

          매개변수로 받을 때, 프로퍼티별로 변수를 초기화해서 사용
          객체의 프로퍼티명과 동일하게 매개변수로 정의

        - 주의점
          전달되는 매개변수 값이 항상 존재한다는 보장 X 
          변수가 전달되지 않으면, 해당 변수는 undefined 값이 됨..
          -> 이후 해당 변수에 대한 추가적인 액션이 있을 경우 에러가 발생할 수 있음...
          -> 오류가 발생하지 않도록 default 값을 설정해줄 필요 있음 : defaultProps 이용

        - Props 로 컴포넌트 전달
          자식 컴포넌트에 또 다른 컴포넌트를 배치하면, 배치된 컴포넌트는 자동으로 Props 의 children 프로퍼티에 저장되어 전달됨
          사용할 땐 props 로 받아와 {props.children} 로 사용하거나, 또는 ({children}) 으로 받아와 {children} 으로 사용 